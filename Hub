
local Players = game:GetService("Players")
local player = Players.LocalPlayer or Players.PlayerAdded:Wait()

-- Hardcoded whitelist UserIds here
local WhitelistUserIds = {
    917787,  -- Replace with actual user ids
    87654321,
    11223344,
}

local function isWhitelisted(userId)
    for _, id in ipairs(WhitelistUserIds) do
        if id == userId then
            return true
        end
    end
    return false
end

if not isWhitelisted(player.UserId) then
    game.StarterGui:SetCore("SendNotification", {
        Title = "Access Denied",
        Text = "You are not whitelisted for this hub.",
        Duration = 5
    })
    return
end

-- Load Rayfield UI
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "totally not cheating",
    LoadingTitle = "Loading Hub",
    LoadingSubtitle = "Welcome",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "TotallyNotCheatingConfig"
    },
})

local Tab = Window:CreateTab("Scripts", "file-code")

-- MM2 Script Button
Tab:CreateButton({
    Name = "MM2 Script",
    Callback = function()
        Rayfield:Destroy()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Au0yX/Community/main/XhubMM2"))()
    end,
})

-- Additional scripts

Tab:CreateButton({
    Name = "Rivals",
    Callback = function()
        Rayfield:Destroy()
        loadstring(game:HttpGet("https://scriptblox.com/script/RIVALS-Ambrion-Hub-V3-46731"))()
    end,
})

Tab:CreateButton({
    Name = "Bladeball",
    Callback = function()
        Rayfield:Destroy()
        loadstring(game:HttpGet("https://scriptblox.com/script/Bladeball-teleporter-Atlas-Hub-V1-34986"))()
    end,
})

Tab:CreateButton({
    Name = "Arsenal",
    Callback = function()
        Rayfield:Destroy()
        loadstring(game:HttpGet("https://scriptblox.com/script/Arsenal-Vision-Hub-V1-29921"))()
    end,
})

Tab:CreateButton({
    Name = "Grow a Garden",
    Callback = function()
        Rayfield:Destroy()
        loadstring(game:HttpGet("https://scriptblox.com/script/Universal-Script-Atlas-Hub-V1-46722"))()
    end,
})

Tab:CreateButton({
    Name = "Steal a Brainrot",
    Callback = function()
        Rayfield:Destroy()
        loadstring(game:HttpGet("https://scriptblox.com/script/Steal-a-Brainrot-Steal-Speed-Sky-Walk-Spinbot-Neon-Avatar-47493"))()
    end,
})